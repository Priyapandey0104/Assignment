I'll provide the complete Java code for your NETCONF Automation Tool, along with instructions for setting up GNS3 to test it.


---

1. GNS3 Setup for NETCONF Testing

To simulate network devices supporting NETCONF, follow these steps:

Step 1: Install GNS3

Download and install GNS3 from https://www.gns3.com/.

Install GNS3 VM (if using Windows/Mac).


Step 2: Add a Router with NETCONF Support

Use Cisco IOSv, IOS-XE, or Juniper vSRX (supports NETCONF).

Upload a compatible IOS image (e.g., cisco-iosv.bin or csr1000v.iso).

Start a router and enable NETCONF using the following command in the CLI:

configure terminal
netconf-yang
end
write memory


Step 3: Enable SSH & User Authentication

configure terminal
hostname Router1
ip domain-name example.com
crypto key generate rsa modulus 2048
username admin privilege 15 secret admin123
aaa new-model
line vty 0 4
transport input ssh
login local
exit

Step 4: Verify NETCONF is Running

show netconf-yang sessions


---

2. Java-Based NETCONF Automation Tool

Now, let’s implement the Java tool.

Project Structure

CapstoneProject/
│── src/main/java/com/wipro/CapstoneProject/
│   ├── authentication/
│   │   ├── KeyStoreUtil.java
│   │   ├── UserAuth.java
│   ├── config/
│   │   ├── ConfigBackup.java
│   │   ├── ConfigRestore.java
│   │   ├── NetconfManager.java
│   ├── discovery/
│   │   ├── DeviceDiscovery.java
│   ├── logging/
│   │   ├── LoggerUtil.java
│   ├── ui/
│   │   ├── CLI.java
│   ├── App.java
│── pom.xml

Step 1: Add Dependencies (pom.xml)

<dependencies>
    <dependency>
        <groupId>org.opendaylight.netconf</groupId>
        <artifactId>netconf-client</artifactId>
        <version>YOUR_VERSION</version>
    </dependency>
    <dependency>
        <groupId>com.jcraft</groupId>
        <artifactId>jsch</artifactId>
        <version>0.1.55</version>
    </dependency>
    <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-core</artifactId>
        <version>2.14.1</version>
    </dependency>
</dependencies>


---

Step 2: NETCONF Manager (NetconfManager.java)

Handles connecting to network devices via NETCONF.

package com.wipro.CapstoneProject.config;

import org.opendaylight.netconf.client.NetconfClientSession;
import org.opendaylight.netconf.client.NetconfClient;
import org.opendaylight.netconf.client.NetconfClientDispatcher;
import org.opendaylight.yangtools.util.concurrent.FluentFutures;
import java.net.InetSocketAddress;

public class NetconfManager {
    private NetconfClientSession session;

    public void connect(String ip, int port, String username, String password) throws Exception {
        NetconfClientDispatcher dispatcher = new NetconfClientDispatcher();
        NetconfClient client = dispatcher.createClient();
        
        session = client.connect(new InetSocketAddress(ip, port), username, password).get();
        System.out.println("Connected to " + ip);
    }

    public String getConfig(String filter) throws Exception {
        String rpc = "<rpc message-id='1' xmlns='urn:ietf:params:xml:ns:netconf:base:1.0'>"
                   + "<get><filter type='subtree'>" + filter + "</filter></get></rpc>";

        return session.sendRpc(rpc).get().toString();
    }

    public void editConfig(String configData) throws Exception {
        String rpc = "<rpc message-id='2' xmlns='urn:ietf:params:xml:ns:netconf:base:1.0'>"
                   + "<edit-config><target><running/></target><config>" + configData + "</config></edit-config></rpc>";

        session.sendRpc(rpc).get();
        System.out.println("Configuration updated!");
    }

    public void disconnect() {
        if (session != null) {
            session.close();
            System.out.println("Disconnected.");
        }
    }
}


---

Step 3: Device Discovery (DeviceDiscovery.java)

Scans IP addresses to check for NETCONF access.

package com.wipro.CapstoneProject.discovery;

import com.jcraft.jsch.*;

public class DeviceDiscovery {
    public static boolean checkNetconf(String ip, String user, String pass) {
        try {
            JSch jsch = new JSch();
            Session session = jsch.getSession(user, ip, 22);
            session.setPassword(pass);
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect(5000);
            
            System.out.println("NETCONF enabled on: " + ip);
            session.disconnect();
            return true;
        } catch (Exception e) {
            System.out.println("No NETCONF on: " + ip);
            return false;
        }
    }
}


---

Step 4: Backup & Restore (ConfigBackup.java & ConfigRestore.java)

Backup Config:

package com.wipro.CapstoneProject.config;

import java.nio.file.*;

public class ConfigBackup {
    public static void saveBackup(String data) throws Exception {
        Files.write(Paths.get("backup.xml"), data.getBytes(), StandardOpenOption.CREATE);
        System.out.println("Backup saved.");
    }
}

Restore Config:

package com.wipro.CapstoneProject.config;

import java.nio.file.*;

public class ConfigRestore {
    public static String restoreBackup() throws Exception {
        return new String(Files.readAllBytes(Paths.get("backup.xml")));
    }
}


---

Step 5: Logging (LoggerUtil.java)

package com.wipro.CapstoneProject.logging;

import java.util.logging.*;

public class LoggerUtil {
    private static final Logger logger = Logger.getLogger(LoggerUtil.class.getName());

    public static void log(String message) {
        logger.log(Level.INFO, message);
    }
}


---

Step 6: CLI (CLI.java)

package com.wipro.CapstoneProject.ui;

import java.util.Scanner;
import com.wipro.CapstoneProject.config.*;

public class CLI {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        NetconfManager netconf = new NetconfManager();

        System.out.print("Enter Router IP: ");
        String ip = scanner.nextLine();

        netconf.connect(ip, 830, "admin", "admin123");

        System.out.print("Retrieve config? (y/n): ");
        if (scanner.nextLine().equalsIgnoreCase("y")) {
            String config = netconf.getConfig("<interfaces/>");
            System.out.println(config);
            ConfigBackup.saveBackup(config);
        }

        System.out.print("Modify config? (y/n): ");
        if (scanner.nextLine().equalsIgnoreCase("y")) {
            netconf.editConfig("<interfaces><interface><name>Gig0/1</name><enabled>true</enabled></interface></interfaces>");
        }

        netconf.disconnect();
    }
}


---

Final Steps

1. Run GNS3, start the router, and enable NETCONF.


2. Run CLI.java to interact with the router.


3. Test configuration changes and backups.



Let me know if you need help with testing!
