Here’s the complete code for Java KeyStore management (KeyStoreUtil.java) and User Authentication (UserAuth.java).


---

1. KeyStore Management (KeyStoreUtil.java)

This class securely stores and retrieves passwords using Java KeyStore (JKS).

Steps:

Create a KeyStore file (keystore.jks).

Store the router’s credentials securely.

Retrieve credentials when needed.



---

KeyStore Utility Class

package com.wipro.CapstoneProject.authentication;

import java.io.*;
import java.security.*;
import java.security.cert.CertificateException;
import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;

public class KeyStoreUtil {
    private static final String KEYSTORE_FILE = "keystore.jks";
    private static final String KEYSTORE_PASSWORD = "keystore123";
    private static final String KEY_ALIAS = "netconf-user";

    // Initialize KeyStore
    public static void createKeyStore() throws Exception {
        File file = new File(KEYSTORE_FILE);
        if (!file.exists()) {
            KeyStore keyStore = KeyStore.getInstance("JCEKS");
            keyStore.load(null, KEYSTORE_PASSWORD.toCharArray());

            try (FileOutputStream fos = new FileOutputStream(KEYSTORE_FILE)) {
                keyStore.store(fos, KEYSTORE_PASSWORD.toCharArray());
            }

            System.out.println("New KeyStore created.");
        }
    }

    // Store credentials
    public static void storeCredentials(String username, String password) throws Exception {
        KeyStore keyStore = KeyStore.getInstance("JCEKS");
        try (FileInputStream fis = new FileInputStream(KEYSTORE_FILE)) {
            keyStore.load(fis, KEYSTORE_PASSWORD.toCharArray());
        }

        SecretKey secretKey = new SecretKeySpec(password.getBytes(), "AES");
        KeyStore.SecretKeyEntry keyEntry = new KeyStore.SecretKeyEntry(secretKey);
        KeyStore.ProtectionParameter protectionParam = new KeyStore.PasswordProtection(KEYSTORE_PASSWORD.toCharArray());

        keyStore.setEntry(KEY_ALIAS, keyEntry, protectionParam);

        try (FileOutputStream fos = new FileOutputStream(KEYSTORE_FILE)) {
            keyStore.store(fos, KEYSTORE_PASSWORD.toCharArray());
        }

        System.out.println("Credentials stored securely.");
    }

    // Retrieve password
    public static String getStoredPassword() throws Exception {
        KeyStore keyStore = KeyStore.getInstance("JCEKS");
        try (FileInputStream fis = new FileInputStream(KEYSTORE_FILE)) {
            keyStore.load(fis, KEYSTORE_PASSWORD.toCharArray());
        }

        KeyStore.ProtectionParameter protectionParam = new KeyStore.PasswordProtection(KEYSTORE_PASSWORD.toCharArray());
        KeyStore.SecretKeyEntry keyEntry = (KeyStore.SecretKeyEntry) keyStore.getEntry(KEY_ALIAS, protectionParam);
        SecretKey secretKey = keyEntry.getSecretKey();

        return new String(secretKey.getEncoded());
    }
}


---

2. User Authentication (UserAuth.java)

This class authenticates users by verifying the username and retrieving the password from Java KeyStore.


---

User Authentication Class

package com.wipro.CapstoneProject.authentication;

import java.util.Scanner;

public class UserAuth {
    public static boolean authenticate() {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter Username: ");
        String username = scanner.nextLine();

        try {
            String storedPassword = KeyStoreUtil.getStoredPassword();

            System.out.print("Enter Password: ");
            String password = scanner.nextLine();

            if (storedPassword.equals(password)) {
                System.out.println("Authentication Successful!");
                return true;
            } else {
                System.out.println("Invalid credentials. Access Denied!");
                return false;
            }
        } catch (Exception e) {
            System.out.println("Error retrieving credentials: " + e.getMessage());
            return false;
        }
    }

    public static void main(String[] args) {
        try {
            // Initialize KeyStore if not present
            KeyStoreUtil.createKeyStore();

            // Store credentials (one-time setup)
            KeyStoreUtil.storeCredentials("admin", "admin123");

            // Authenticate user
            if (authenticate()) {
                System.out.println("Access granted to NETCONF Manager.");
            } else {
                System.out.println("Access denied.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


---

How to Use

1. Run UserAuth.main() once to store credentials:

Enter Username: admin
Enter Password: admin123


2. Later, authenticate users before accessing NETCONF Manager.




---

This ensures secure storage of credentials for network devices. Let me know if you need modifications!
